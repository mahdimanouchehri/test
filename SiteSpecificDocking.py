# -*- coding: utf-8 -*-
"""moad_Computing_BA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qDhv0x2g3QcJp0rq6lPz3f7QOvUfvWin
"""
import argparse
from pdb_manip_py import pdb_manip
from docking_py import docking
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdmolfiles
import pandas as pd
import subprocess
import glob
import os


parser = argparse.ArgumentParser()
parser.add_argument(
    '--range_',  nargs='+', required=False, default=None,
    help='range of docking'
)

args = parser.parse_args()
# print(args.range_)

def create_dataframe(*args):
    # input column name
    # dictionary of lists
    dict = {}
    for i in args:
        dict[i] = []

    df = pd.DataFrame(dict)
    return df



pr_list = ["8X5Y", "7F61"]

import os
# print(type(args.range_[0]))
dir_path = "/content/drive/MyDrive/Ground_truth_docking/BlindDocking/ligands"
number = -1
result_path = f"/content/drive/MyDrive/Ground_truth_docking/SiteSpecific_{args.range_[0]}_{args.range_[1]}.csv"
# Check if the file already exists
if os.path.exists(result_path):
  df = pd.read_csv(result_path)
else : 
  df = create_dataframe("idx", "BA protein1", "BA protein2")
      
for ligand_path in os.listdir(dir_path):
  number += 1
  if int(args.range_[0]) <= number <= int(args.range_[1]):

      ligand_full_path = os.path.join(dir_path, ligand_path)


      print(f"working on {ligand_path}")

      save_inf = []
      ligand_name = os.path.splitext(os.path.basename(ligand_path))[0]
      if df['idx'].eq(ligand_name).any():
        continue

      save_inf.append(ligand_name)
      for protein in pr_list:
          coor_1hsg = pdb_manip.Coor()
          coor_1hsg.get_PDB(f'{protein}', f'/content/data/{protein}.pdb')

          # Keep only the amino acids
          rec_coor = coor_1hsg.select_part_dict(selec_dict={'res_name': pdb_manip.PROTEIN_RES})
          rec_coor.write_pdb(f'/content/data/rec_{protein}.pdb')

          test_dock = docking.Docking('test', lig_pdb = ligand_full_path,
                                      rec_pdb=f'/content/data/rec_{protein}.pdb')
          try:
              test_dock.prepare_ligand()
              test_dock.prepare_receptor()

              if protein == "8X5Y":
                  
                  test_dock.run_docking(out_pdb=f'/content/results/{ligand_name}_{protein}.pdb',
                                        num_modes=10,
                                        energy_range=10,
                                        exhaustiveness=16,
                                        center = [179.588, 168.953, 139.044],
                                        grid_size = [15.9431, 17.6008 , 19.333],
                                        dock_bin='vina')
                  # print(test_dock.affinity)
                  save_inf.append(test_dock.affinity[1]["affinity"])
              
              elif  protein == "7F61" : 
                  test_dock.run_docking(out_pdb=f'/content/results/{ligand_name}_{protein}.pdb',
                                        num_modes=10,
                                        energy_range=10,
                                        exhaustiveness=16,
                                        center = [-20.4788, 51.5489, -1.5676],
                                        grid_size = [19.1285, 21.0051 , 22.772],
                                        dock_bin='vina')
                  # print(test_dock.affinity)
                  save_inf.append(test_dock.affinity[1]["affinity"])

              else : 
                  print("protein name not exite")  
          
          except:
              save_inf.append(0)

      df.loc[len(df.index)] = save_inf

df.to_csv(result_path)


# -*- coding: utf-8 -*-
"""dock_fragments_create_pdb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KknQe4tfr16I_luNC3nU3LoRCEM23dVB
"""

from pdb_manip_py import pdb_manip
from docking_py import docking
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdmolfiles
import pandas as pd
import subprocess

df = pd.read_csv("geom_multifrag_test_table_with_binding_affinity.csv")

# Create a Coor object
coor_1hsg = pdb_manip.Coor()
coor_1hsg.get_PDB('8X5Y', 'data/8X5Y.pdb')


# Select res_name MK1
lig_coor = coor_1hsg.select_part_dict(selec_dict={'res_name': ['MK1']})
# Save the ligand coordinates
lig_coor.write_pdb('data/lig.pdb')

# Keep only the amino acids
rec_coor = coor_1hsg.select_part_dict(selec_dict={'res_name': pdb_manip.PROTEIN_RES})
rec_coor.write_pdb('data/rec.pdb')

fragments = {}

for i in range(201):
  fragment_list = df["fragments"][i].split(".")
  j = 1
  for fragment in fragment_list:
    if fragment not in fragments:
      fragments[fragment] = True
      if df[f"binding_affinity_frag{j}"][i] < -6 :
        mol = Chem.MolFromSmiles(fragment)
        try:
          # Add hydrogens to the molecule
          mol = Chem.AddHs(mol)

          # Generate 3D conformers
          AllChem.EmbedMolecule(mol)
        except:
          fragments[fragment] = True
          continue

        # Save the molecule to a PDB file
        rdmolfiles.MolToPDBFile(mol, f"uuid{i}_fragment{j}.pdb")
        test_dock = docking.Docking('test', lig_pdb= f"uuid{i}_fragment{j}.pdb", rec_pdb= 'data/rec.pdb')
        test_dock.prepare_ligand()
        test_dock.prepare_receptor()
        out_pdb=f'/content/test/outputs_pdb/docked_uuid{i}_fragment{j}.pdb'
        test_dock.run_docking(out_pdb=f'/content/test/outputs_pdb/docked_uuid{i}_fragment{j}.pdb',
                                  num_modes=10,
                                  energy_range=10,
                                  exhaustiveness=16,
                                  dock_bin='smina')
        print(test_dock.affinity)
        out_pdb = f'{out_pdb}.pdb'
        out_sdf = f'{out_pdb}.sdf'
        subprocess.run(f'obabel {out_pdb} -O {out_sdf} 2> /dev/null', shell=True)

    j += 1
